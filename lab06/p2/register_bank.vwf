/*<simulation_settings>
<ftestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off register_bank -c register_bank --vector_source="/home/ec2016/ra187890/MC/613/lab06/p2/register_bank.vwf" --testbench_file="/home/ec2016/ra187890/MC/613/lab06/p2/simulation/qsim/register_bank.vwf.vht"</ftestbench_cmd>
<ttestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off register_bank -c register_bank --vector_source="/home/ec2016/ra187890/MC/613/lab06/p2/register_bank.vwf" --testbench_file="/home/ec2016/ra187890/MC/613/lab06/p2/simulation/qsim/register_bank.vwf.vht"</ttestbench_cmd>
<fnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=on --flatten_buses=off --tool=modelsim_oem --format=vhdl --output_directory="/home/ec2016/ra187890/MC/613/lab06/p2/simulation/qsim/" register_bank -c register_bank</fnetlist_cmd>
<tnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=off --flatten_buses=off --timescale=1ps --tool=modelsim_oem --format=vhdl --output_directory="/home/ec2016/ra187890/MC/613/lab06/p2/simulation/qsim/" register_bank -c register_bank</tnetlist_cmd>
<modelsim_script>onerror {exit -code 1}
vlib work
vcom -work work register_bank.vho
vcom -work work register_bank.vwf.vht
vsim -novopt -c -t 1ps -L cyclonev -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.register_bank_vhd_vec_tst
vcd file -direction register_bank.msim.vcd
vcd add -internal register_bank_vhd_vec_tst/*
vcd add -internal register_bank_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f

</modelsim_script>
<modelsim_script_timing>onerror {exit -code 1}
vlib work
vcom -work work register_bank.vho
vcom -work work register_bank.vwf.vht
vsim -novopt -c -t 1ps -sdfmax register_bank_vhd_vec_tst/i1=register_bank_vhd.sdo -L cyclonev -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.register_bank_vhd_vec_tst
vcd file -direction register_bank.msim.vcd
vcd add -internal register_bank_vhd_vec_tst/*
vcd add -internal register_bank_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f

</modelsim_script_timing>
<hdl_lang>vhdl</hdl_lang>
</simulation_settings>*/
/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2017  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel FPGA IP License Agreement, or other applicable license
agreement, including, without limitation, that your use is for
the sole purpose of programming logic devices manufactured by
Intel and sold by Intel or its authorized distributors.  Please
refer to the applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1024.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clear")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("data_in")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("data_in[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "data_in";
}

SIGNAL("data_in[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "data_in";
}

SIGNAL("data_in[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "data_in";
}

SIGNAL("data_in[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "data_in";
}

SIGNAL("data_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data_out[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("data_out[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("data_out[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("data_out[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("reg_rd")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("reg_rd[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "reg_rd";
}

SIGNAL("reg_rd[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "reg_rd";
}

SIGNAL("reg_rd[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "reg_rd";
}

SIGNAL("reg_wr")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("reg_wr[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "reg_wr";
}

SIGNAL("reg_wr[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "reg_wr";
}

SIGNAL("reg_wr[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "reg_wr";
}

SIGNAL("we")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("clear")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 360.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 474.0;
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 32.0;
			LEVEL 1 FOR 32.0;
		}
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 12.0;
	}
}

TRANSITION_LIST("data_in[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 128.0;
		LEVEL 1 FOR 192.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 64.0;
	}
}

TRANSITION_LIST("data_in[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 128.0;
		LEVEL 1 FOR 192.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 192.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 128.0;
		LEVEL 0 FOR 192.0;
		LEVEL 1 FOR 64.0;
	}
}

TRANSITION_LIST("data_in[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 128.0;
		LEVEL 1 FOR 128.0;
		LEVEL 0 FOR 192.0;
		LEVEL 1 FOR 256.0;
	}
}

TRANSITION_LIST("data_in[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 128.0;
		LEVEL 0 FOR 448.0;
		LEVEL 1 FOR 192.0;
		LEVEL 0 FOR 128.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 64.0;
	}
}

TRANSITION_LIST("data_out[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1024.0;
	}
}

TRANSITION_LIST("data_out[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1024.0;
	}
}

TRANSITION_LIST("data_out[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1024.0;
	}
}

TRANSITION_LIST("data_out[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1024.0;
	}
}

TRANSITION_LIST("reg_rd[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 90.0;
		LEVEL 0 FOR 159.0;
		LEVEL 1 FOR 83.0;
		LEVEL 0 FOR 83.0;
		LEVEL 1 FOR 166.0;
		LEVEL 0 FOR 332.0;
		LEVEL 1 FOR 111.0;
	}
}

TRANSITION_LIST("reg_rd[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 76.0;
		LEVEL 0 FOR 83.0;
		LEVEL 1 FOR 166.0;
		LEVEL 0 FOR 249.0;
		LEVEL 1 FOR 360.0;
	}
}

TRANSITION_LIST("reg_rd[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 332.0;
		LEVEL 0 FOR 83.0;
		LEVEL 1 FOR 249.0;
		LEVEL 0 FOR 83.0;
		LEVEL 1 FOR 166.0;
		LEVEL 0 FOR 83.0;
		LEVEL 1 FOR 28.0;
	}
}

TRANSITION_LIST("reg_wr[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 285.0;
		LEVEL 0 FOR 95.0;
		LEVEL 1 FOR 190.0;
		LEVEL 0 FOR 190.0;
		LEVEL 1 FOR 95.0;
		LEVEL 0 FOR 74.0;
		LEVEL 1 FOR 95.0;
	}
}

TRANSITION_LIST("reg_wr[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 95.0;
		LEVEL 1 FOR 95.0;
		LEVEL 0 FOR 190.0;
		LEVEL 1 FOR 549.0;
		LEVEL 0 FOR 95.0;
	}
}

TRANSITION_LIST("reg_wr[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 570.0;
		LEVEL 0 FOR 95.0;
		LEVEL 1 FOR 95.0;
		LEVEL 0 FOR 169.0;
		LEVEL 1 FOR 95.0;
	}
}

TRANSITION_LIST("we")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 130.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 70.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 230.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 110.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 114.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "data_in";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4;
}

DISPLAY_LINE
{
	CHANNEL = "data_in[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data_in[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data_in[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data_in[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "reg_rd";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
	CHILDREN = 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "reg_rd[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "reg_rd[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "reg_rd[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "reg_wr";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
	CHILDREN = 10, 11, 12;
}

DISPLAY_LINE
{
	CHANNEL = "reg_wr[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "reg_wr[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "reg_wr[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clear";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "we";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
	CHILDREN = 17, 18, 19, 20;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 16;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
